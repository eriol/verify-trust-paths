#!/usr/bin/python3
# coding: utf-8
import requests
import argparse
import requests
import tempfile
import subprocess
import shlex
import os
import re
import json
from lxml.html import document_fromstring


class Verify:
    def __init__(self, workdir, keyserver="pool.sks-keyservers.net"):
        self.workdir = workdir
        self.base_cmd = ["/usr/bin/gpg", "--homedir", workdir, "-q",
                         "--no-options", "--no-auto-check-trustdb",
                         "--no-permission-warning", "--no-tty", "--batch",
                         "--display-charset", "utf-8", "--no-default-keyring",
                         "--keyserver", keyserver]
        self.all_paths = []

    def run_gpg(self, args, input=None):
        """
        Run gpg with the given command, waiting for its completion, returning stdout.

        In case gpg returns nonzero, raises a RuntimeError that includes stderr.
        """
        cmd = self.base_cmd + args
        proc = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        stdout, stderr = proc.communicate(input=input)
        result = proc.wait()
        if result != 0:
            raise RuntimeError("{} exited with status {}: {}".format(
                " ".join(shlex.quote(x) for x in self.base_cmd + args),
                result,
                stderr.strip()
            ))
        return stdout

    def recv(self):
        all_keyids = set()
        for path in self.all_paths:
            all_keyids.update(path)

        args = ["--recv"]
        args.extend(all_keyids)
        self.run_gpg(args)

    def download_untrusted_paths(self, fpr1, fpr2):
        """
        Screen-scrape candidate untrusted trust paths from http://pgp.cs.uu.nl/

        Generate a sequence of paths, each path as a list of short keyids as given
        by the site.
        """
        res = requests.get("http://pgp.cs.uu.nl/mk_path.cgi", params={
            "FROM": fpr1,
            "TO": fpr2,
        })
        res.raise_for_status()
        page = document_fromstring(res.content)

        re_keyid = re.compile("^[A-F0-9]{8}$")

        all_paths = []
        for table in page.iter("table"):
            path = []
            for tr in table.iterfind("tr"):
                for small in tr.iter("small"):
                    if not re_keyid.match(small.text): continue
                    path.append(small.text)
            if path:
                all_paths.append(path)

        with open(os.path.join(self.workdir, "paths.json"), "wt") as fd:
            json.dump(all_paths, fd, indent=1)

        self.all_paths = all_paths

    def load_untrusted_paths(self):
        with open(os.path.join(self.workdir, "paths.json"), "rt") as fd:
            self.all_paths = json.load(fd)

    def check_paths(self, fpr1, fpr2):
        subprocess.check_call(["hkt", "findpaths", "--keyring", os.path.join(self.workdir, "pubring.gpg"), "", fpr1, fpr2])


def main():
    parser = argparse.ArgumentParser(
        description="Verify trust paths",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("fpr1", help="starting fingerprint for trust paths")
    parser.add_argument("fpr2", help="ending fingerprint for trust paths")
    parser.add_argument("--keyserver", default="pool.sks-keyservers.net", help="keyserver to use")
    args = parser.parse_args()

    with tempfile.TemporaryDirectory() as workdir:
        verify = Verify(workdir, keyserver=args.keyserver)
        verify.download_untrusted_paths(args.fpr1, args.fpr2)
        verify.recv()
        verify.check_paths(args.fpr1, args.fpr2)

if __name__ == "__main__":
    main()
